#include "test_main.h"

// A[3][4] * B[4][5]
TEST(TestMutMatrix, multMatrix1) {
  int rows = 3;
  int columns = 4;
  int rows2 = 4;
  int columns2 = 5;
  S21Matrix A(rows, columns);
  A(0, 0) = -9.999843472614811546;
  A(0, 1) = -7.369244237136674869;
  A(0, 2) = 5.112106443900664488;
  A(0, 3) = -0.826997361531013553;
  A(1, 0) = 0.655344748243384956;
  A(1, 1) = -5.620816273438192567;
  A(1, 2) = -9.059107675710277974;
  A(1, 3) = 3.577294337366378585;
  A(2, 0) = 3.585928116732244320;
  A(2, 1) = 8.693857918816551233;
  A(2, 2) = -2.329958450202810560;
  A(2, 3) = 0.388327441359091807;
  S21Matrix B(rows2, columns2);
  B(0, 0) = 6.619306922247311320;
  B(0, 1) = -9.308557789450771836;
  B(0, 2) = -8.930767299109495738;
  B(0, 3) = 0.594003866703252115;
  B(0, 4) = 3.422987681544846339;
  B(1, 0) = -9.846036275777050761;
  B(1, 1) = -2.331686984902101578;
  B(1, 2) = -8.663155249628776033;
  B(1, 3) = -1.650280510843861848;
  B(1, 4) = 3.735454247209922585;
  B(2, 0) = 1.779532857136583601;
  B(2, 1) = 8.608729894556446993;
  B(2, 2) = 6.923337810171460660;
  B(2, 3) = 0.538575551723397439;
  B(2, 4) = -8.160702184848814156;
  B(3, 0) = 3.078379245977094669;
  B(3, 1) = -1.680012862980371224;
  B(3, 2) = 4.023811888892117494;
  B(3, 3) = 8.206416609793162564;
  B(3, 4) = 5.243960793709362633;
  B(3, 4) = 5.243960793709362633;
  S21Matrix O(rows, columns2);
  O(0, 0) = 12.91716283612586708908212928823433692;
  O(0, 1) = 155.665001499378692890643732986346945194;
  O(0, 2) = 185.212339997456825448193497227269451523;
  O(0, 3) = 2.187945119603927581527655534279794462;
  O(0, 4) = -107.811935674766153979519959965153703636;
  O(1, 0) = 54.571977835891659110367706816227754398;
  O(1, 1) = -76.991641879070050848930993620962598712;
  O(1, 2) = -5.483630653718418805162987774507007667;
  O(1, 3) = 34.14295461928445916225538340893824911;
  O(1, 4) = 73.934806033658200438502876758608464638;
  O(2, 0) = -64.81450012112804629548983049296078559;
  O(2, 1) = -74.361552521177967684075880112951725042;
  O(2, 2) = -121.909863289885783871624436155737504791;
  O(2, 3) = -10.285331013412507237365060284083964476;
  O(2, 4) = 65.800567150748268875922968135638376976;
  ASSERT_NO_THROW(A.MulMatrix(B));
  for (int i = 0; i < rows; i++)
    for (int j = 0; j < columns2; j++) ASSERT_FLOAT_EQ(A(i, j), O(i, j));
}

TEST(TestMutMatrix, multMatrix2) {
  int rows = 3;
  int columns = 4;
  int rows2 = 4;
  int columns2 = 5;
  S21Matrix A(rows, columns);
  A(0, 0) = -9.999843472614811546;
  A(0, 1) = -7.369244237136674869;
  A(0, 2) = 5.112106443900664488;
  A(0, 3) = -0.826997361531013553;
  A(1, 0) = 0.655344748243384956;
  A(1, 1) = -5.620816273438192567;
  A(1, 2) = -9.059107675710277974;
  A(1, 3) = 3.577294337366378585;
  A(2, 0) = 3.585928116732244320;
  A(2, 1) = 8.693857918816551233;
  A(2, 2) = -2.329958450202810560;
  A(2, 3) = 0.388327441359091807;
  S21Matrix B(rows2, columns2);
  B(0, 0) = 6.619306922247311320;
  B(0, 1) = -9.308557789450771836;
  B(0, 2) = -8.930767299109495738;
  B(0, 3) = 0.594003866703252115;
  B(0, 4) = 3.422987681544846339;
  B(1, 0) = -9.846036275777050761;
  B(1, 1) = -2.331686984902101578;
  B(1, 2) = -8.663155249628776033;
  B(1, 3) = -1.650280510843861848;
  B(1, 4) = 3.735454247209922585;
  B(2, 0) = 1.779532857136583601;
  B(2, 1) = 8.608729894556446993;
  B(2, 2) = 6.923337810171460660;
  B(2, 3) = 0.538575551723397439;
  B(2, 4) = -8.160702184848814156;
  B(3, 0) = 3.078379245977094669;
  B(3, 1) = -1.680012862980371224;
  B(3, 2) = 4.023811888892117494;
  B(3, 3) = 8.206416609793162564;
  B(3, 4) = 5.243960793709362633;
  S21Matrix O(rows, columns2);
  O(0, 0) = 12.91716283612586708908212928823433692;
  O(0, 1) = 155.665001499378692890643732986346945194;
  O(0, 2) = 185.212339997456825448193497227269451523;
  O(0, 3) = 2.187945119603927581527655534279794462;
  O(0, 4) = -107.811935674766153979519959965153703636;
  O(1, 0) = 54.571977835891659110367706816227754398;
  O(1, 1) = -76.991641879070050848930993620962598712;
  O(1, 2) = -5.483630653718418805162987774507007667;
  O(1, 3) = 34.14295461928445916225538340893824911;
  O(1, 4) = 73.934806033658200438502876758608464638;
  O(2, 0) = -64.81450012112804629548983049296078559;
  O(2, 1) = -74.361552521177967684075880112951725042;
  O(2, 2) = -121.909863289885783871624436155737504791;
  O(2, 3) = -10.285331013412507237365060284083964476;
  O(2, 4) = 65.800567150748268875922968135638376976;
  ASSERT_NO_THROW(A *= B);
  for (int i = 0; i < rows; i++)
    for (int j = 0; j < columns2; j++) ASSERT_FLOAT_EQ(A(i, j), O(i, j));
}

TEST(TestMutMatrix, multMatrix3) {
  int rows = 3;
  int columns = 4;
  int rows2 = 4;
  int columns2 = 5;
  S21Matrix A(rows, columns);
  A(0, 0) = -9.999843472614811546;
  A(0, 1) = -7.369244237136674869;
  A(0, 2) = 5.112106443900664488;
  A(0, 3) = -0.826997361531013553;
  A(1, 0) = 0.655344748243384956;
  A(1, 1) = -5.620816273438192567;
  A(1, 2) = -9.059107675710277974;
  A(1, 3) = 3.577294337366378585;
  A(2, 0) = 3.585928116732244320;
  A(2, 1) = 8.693857918816551233;
  A(2, 2) = -2.329958450202810560;
  A(2, 3) = 0.388327441359091807;
  S21Matrix B(rows2, columns2);
  B(0, 0) = 6.619306922247311320;
  B(0, 1) = -9.308557789450771836;
  B(0, 2) = -8.930767299109495738;
  B(0, 3) = 0.594003866703252115;
  B(0, 4) = 3.422987681544846339;
  B(1, 0) = -9.846036275777050761;
  B(1, 1) = -2.331686984902101578;
  B(1, 2) = -8.663155249628776033;
  B(1, 3) = -1.650280510843861848;
  B(1, 4) = 3.735454247209922585;
  B(2, 0) = 1.779532857136583601;
  B(2, 1) = 8.608729894556446993;
  B(2, 2) = 6.923337810171460660;
  B(2, 3) = 0.538575551723397439;
  B(2, 4) = -8.160702184848814156;
  B(3, 0) = 3.078379245977094669;
  B(3, 1) = -1.680012862980371224;
  B(3, 2) = 4.023811888892117494;
  B(3, 3) = 8.206416609793162564;
  B(3, 4) = 5.243960793709362633;
  S21Matrix O(rows, columns2);
  O(0, 0) = 12.91716283612586708908212928823433692;
  O(0, 1) = 155.665001499378692890643732986346945194;
  O(0, 2) = 185.212339997456825448193497227269451523;
  O(0, 3) = 2.187945119603927581527655534279794462;
  O(0, 4) = -107.811935674766153979519959965153703636;
  O(1, 0) = 54.571977835891659110367706816227754398;
  O(1, 1) = -76.991641879070050848930993620962598712;
  O(1, 2) = -5.483630653718418805162987774507007667;
  O(1, 3) = 34.14295461928445916225538340893824911;
  O(1, 4) = 73.934806033658200438502876758608464638;
  O(2, 0) = -64.81450012112804629548983049296078559;
  O(2, 1) = -74.361552521177967684075880112951725042;
  O(2, 2) = -121.909863289885783871624436155737504791;
  O(2, 3) = -10.285331013412507237365060284083964476;
  O(2, 4) = 65.800567150748268875922968135638376976;
  S21Matrix C;
  ASSERT_NO_THROW(C = A * B);
  for (int i = 0; i < rows; i++)
    for (int j = 0; j < columns2; j++) ASSERT_FLOAT_EQ(C(i, j), O(i, j));
}

// A[3][4] * B[3][5] answer = 2
TEST(TestMutMatrix, multMatrix4) {
  int rows = 3;
  int columns = 4;
  int rows2 = 3;
  int columns2 = 5;
  S21Matrix A(rows, columns);
  S21Matrix B(rows2, columns2);
  for (int i = 0; i < rows; i++)
    for (int j = 0; j < columns; j++)
      A(i, j) = (double)rand() / RAND_MAX * (10.0 - -10.0) + -10.0;
  for (int i = 0; i < rows2; i++)
    for (int j = 0; j < columns2; j++)
      B(i, j) = (double)rand() / RAND_MAX * (10.0 - -10.0) + -10.0;
  ASSERT_ANY_THROW(A.MulMatrix(B));
}

TEST(TestMutMatrix, multMatrix5) {
  int rows = 3;
  int columns = 4;
  int rows2 = 3;
  int columns2 = 5;
  S21Matrix A(rows, columns);
  S21Matrix B(rows2, columns2);
  for (int i = 0; i < rows; i++)
    for (int j = 0; j < columns; j++)
      A(i, j) = (double)rand() / RAND_MAX * (10.0 - -10.0) + -10.0;
  for (int i = 0; i < rows2; i++)
    for (int j = 0; j < columns2; j++)
      B(i, j) = (double)rand() / RAND_MAX * (10.0 - -10.0) + -10.0;
  ASSERT_ANY_THROW(A *= B);
}

TEST(TestMutMatrix, multMatrix6) {
  int rows = 3;
  int columns = 4;
  int rows2 = 3;
  int columns2 = 5;
  S21Matrix A(rows, columns);
  S21Matrix B(rows2, columns2);
  for (int i = 0; i < rows; i++)
    for (int j = 0; j < columns; j++)
      A(i, j) = (double)rand() / RAND_MAX * (10.0 - -10.0) + -10.0;
  for (int i = 0; i < rows2; i++)
    for (int j = 0; j < columns2; j++)
      B(i, j) = (double)rand() / RAND_MAX * (10.0 - -10.0) + -10.0;
  S21Matrix C;
  ASSERT_ANY_THROW(C = A * B);
}

// A[3][4] * B[4][5] = A[3][5]
TEST(TestMutMatrix, multMatrix7) {
  int rows = 3;
  int columns = 4;
  int rows2 = 4;
  int columns2 = 5;
  S21Matrix A(rows, columns);
  S21Matrix B(rows2, columns2);
  double number = 0;
  for (int i = 0; i < rows; i++)
    for (int j = 0; j < columns; j++) A(i, j) = number++;
  for (int i = 0; i < rows2; i++)
    for (int j = 0; j < columns2; j++) B(i, j) = number++;
  ASSERT_NO_THROW(A.MulMatrix(B));
  ASSERT_EQ(A.GetRows(), 3);
  ASSERT_EQ(A.GetCols(), 5);
}

TEST(TestMutMatrix, multMatrix8) {
  int rows = 3;
  int columns = 4;
  int rows2 = 4;
  int columns2 = 5;
  S21Matrix A(rows, columns);
  S21Matrix B(rows2, columns2);
  double number = 0;
  for (int i = 0; i < rows; i++)
    for (int j = 0; j < columns; j++) A(i, j) = number++;
  for (int i = 0; i < rows2; i++)
    for (int j = 0; j < columns2; j++) B(i, j) = number++;
  ASSERT_NO_THROW(A *= B);
  ASSERT_EQ(A.GetRows(), 3);
  ASSERT_EQ(A.GetCols(), 5);
}

TEST(TestMutMatrix, multMatrix9) {
  int rows = 3;
  int columns = 4;
  int rows2 = 4;
  int columns2 = 5;
  S21Matrix A(rows, columns);
  S21Matrix B(rows2, columns2);
  double number = 0;
  for (int i = 0; i < rows; i++)
    for (int j = 0; j < columns; j++) A(i, j) = number++;
  for (int i = 0; i < rows2; i++)
    for (int j = 0; j < columns2; j++) B(i, j) = number++;
  S21Matrix C;
  ASSERT_NO_THROW(C = A * B);
  ASSERT_EQ(C.GetRows(), 3);
  ASSERT_EQ(C.GetCols(), 5);
}