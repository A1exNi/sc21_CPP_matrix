#include "test_main.h"

// C=O random
TEST(TestMutNumber, multNumber1) {
  double number_m = -9.999843472614812;
  int rows = 3;
  int columns = 4;
  S21Matrix A(rows, columns);
  A(0, 0) = -7.369244237136674869;
  A(0, 1) = 5.112106443900664488;
  A(0, 2) = -0.826997361531013553;
  A(0, 3) = 0.655344748243384956;
  A(1, 0) = -5.620816273438192567;
  A(1, 1) = -9.059107675710277974;
  A(1, 2) = 3.577294337366378585;
  A(1, 3) = 3.585928116732244320;
  A(2, 0) = 8.693857918816551233;
  A(2, 1) = -2.329958450202810560;
  A(2, 2) = 0.388327441359091807;
  A(2, 3) = 6.619306922247311320;
  S21Matrix O(rows, columns);
  O(0, 0) = 73.691288882835494602841694857509237474;
  O(0, 1) = -51.120264254352176062880152140294578448;
  O(0, 2) = 8.269844167575577329891379385466882938;
  O(0, 3) = -6.553344903034010037270103521071501976;
  O(1, 0) = 56.207282922708019679448366531562978582;
  O(1, 1) = 90.589658758666160157093188377284687804;
  O(1, 2) = -35.77238342913510842754611590626514241;
  O(1, 3) = -35.85871987137085734455409863842891872;
  O(2, 0) = -86.937218361318280040640547329948936218;
  O(2, 1) = 23.29921979972429761135361829393872576;
  O(2, 2) = -3.883213629711925208653841479017603622;
  O(2, 3) = -66.19203311966881399516907430699250072;
  ASSERT_NO_THROW(A.MulNumber(number_m));
  for (int i = 0; i < rows; i++)
    for (int j = 0; j < columns; j++) ASSERT_FLOAT_EQ(A(i, j), O(i, j));
}

TEST(TestMutNumber, multNumber2) {
  double number_m = -9.999843472614812;
  int rows = 3;
  int columns = 4;
  S21Matrix A(rows, columns);
  A(0, 0) = -7.369244237136674869;
  A(0, 1) = 5.112106443900664488;
  A(0, 2) = -0.826997361531013553;
  A(0, 3) = 0.655344748243384956;
  A(1, 0) = -5.620816273438192567;
  A(1, 1) = -9.059107675710277974;
  A(1, 2) = 3.577294337366378585;
  A(1, 3) = 3.585928116732244320;
  A(2, 0) = 8.693857918816551233;
  A(2, 1) = -2.329958450202810560;
  A(2, 2) = 0.388327441359091807;
  A(2, 3) = 6.619306922247311320;
  S21Matrix O(rows, columns);
  O(0, 0) = 73.691288882835494602841694857509237474;
  O(0, 1) = -51.120264254352176062880152140294578448;
  O(0, 2) = 8.269844167575577329891379385466882938;
  O(0, 3) = -6.553344903034010037270103521071501976;
  O(1, 0) = 56.207282922708019679448366531562978582;
  O(1, 1) = 90.589658758666160157093188377284687804;
  O(1, 2) = -35.77238342913510842754611590626514241;
  O(1, 3) = -35.85871987137085734455409863842891872;
  O(2, 0) = -86.937218361318280040640547329948936218;
  O(2, 1) = 23.29921979972429761135361829393872576;
  O(2, 2) = -3.883213629711925208653841479017603622;
  O(2, 3) = -66.19203311966881399516907430699250072;
  ASSERT_NO_THROW(A *= number_m);
  for (int i = 0; i < rows; i++)
    for (int j = 0; j < columns; j++) ASSERT_FLOAT_EQ(A(i, j), O(i, j));
}

TEST(TestMutNumber, multNumber3) {
  double number_m = -9.999843472614812;
  int rows = 3;
  int columns = 4;
  S21Matrix A(rows, columns);
  A(0, 0) = -7.369244237136674869;
  A(0, 1) = 5.112106443900664488;
  A(0, 2) = -0.826997361531013553;
  A(0, 3) = 0.655344748243384956;
  A(1, 0) = -5.620816273438192567;
  A(1, 1) = -9.059107675710277974;
  A(1, 2) = 3.577294337366378585;
  A(1, 3) = 3.585928116732244320;
  A(2, 0) = 8.693857918816551233;
  A(2, 1) = -2.329958450202810560;
  A(2, 2) = 0.388327441359091807;
  A(2, 3) = 6.619306922247311320;
  S21Matrix O(rows, columns);
  O(0, 0) = 73.691288882835494602841694857509237474;
  O(0, 1) = -51.120264254352176062880152140294578448;
  O(0, 2) = 8.269844167575577329891379385466882938;
  O(0, 3) = -6.553344903034010037270103521071501976;
  O(1, 0) = 56.207282922708019679448366531562978582;
  O(1, 1) = 90.589658758666160157093188377284687804;
  O(1, 2) = -35.77238342913510842754611590626514241;
  O(1, 3) = -35.85871987137085734455409863842891872;
  O(2, 0) = -86.937218361318280040640547329948936218;
  O(2, 1) = 23.29921979972429761135361829393872576;
  O(2, 2) = -3.883213629711925208653841479017603622;
  O(2, 3) = -66.19203311966881399516907430699250072;
  S21Matrix C;
  ASSERT_NO_THROW(C = A * number_m);
  for (int i = 0; i < rows; i++)
    for (int j = 0; j < columns; j++) ASSERT_FLOAT_EQ(C(i, j), O(i, j));
}